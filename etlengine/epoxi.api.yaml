---
swagger: "2.0"
info:
  version: "1.0.2"
host: "localhost:8002"
basePath: "/api"
tags:
- name: "admins"
schemes:
- "http"
paths:
  /adminApi/account:
    get:
      summary: "returns an array of accounts"
      description: ""
      operationId: "searchAccount"
      parameters:
      - name: "searchString"
        in: "query"
        required: false
        type: "string"
      - name: "name"
        in: "query"
        required: false
        type: "string"
      - name: "skip"
        in: "query"
        required: false
        type: "integer"
        default: 0
        format: "int32"
      - name: "limit"
        in: "query"
        required: false
        type: "integer"
        default: 0
        format: "int32"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Account"
    post:
      summary: "adds an account"
      description: ""
      operationId: "addAccount"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Account"
      responses:
        201:
          description: "account created"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing account already exists"
  /adminApi/account/{id}:
    delete:
      summary: "deletes account"
      description: ""
      operationId: "deleteAccount"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        201:
          description: "account deleted"
        400:
          description: "invalid input, object invalid"
  /adminApi/account{id}:
    get:
      summary: "returns an specific account based on the id"
      description: ""
      operationId: "getAccount"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "account matching id"
          schema:
            $ref: "#/definitions/Account"
  /adminApi/account{name}:
    get:
      summary: "returns an specific account based on the name"
      description: ""
      operationId: "getAccount"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "account matching name"
          schema:
            $ref: "#/definitions/Account"
  /adminApi/project/{id}/metadata:
    get:
      summary: "returns an project"
      description: ""
      operationId: "getProjectMetadata"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "metadata for project"
          schema:
            type: "object"
            additionalProperties:
              $ref: "#/definitions/Metadata"
    post:
      summary: "sets metadata for a project"
      description: ""
      operationId: "addProjectMetadata"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Metadata"
      responses:
        201:
          description: "project metadata created"
        400:
          description: "invalid input, object invalid"
  /adminApi/project/{id}/metadata{key}:
    delete:
      summary: "deletes metadata from a project"
      description: ""
      operationId: "deleteProjectMetadata"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "key"
        in: "path"
        required: true
        type: "string"
      responses:
        201:
          description: "project metadata deleted"
        400:
          description: "invalid input, object invalid"
  /adminApi/trash/account{id}:
    get:
      summary: "returns an specific deleted account based on the id"
      description: ""
      operationId: "getDeletedAccount"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "account matching id"
          schema:
            $ref: "#/definitions/Account"
    patch:
      summary: "acts on the specific ingestion specified by the id. Performs the action\
        \ passed via the query param, either an DELETE (permanant), or an UNDELETE"
      description: ""
      operationId: "patchAccount"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "operation"
        in: "query"
        required: false
        type: "string"
        enum:
        - "UNDELETE"
        - "DELETE"
      responses:
        200:
          description: "account matching id"
          schema:
            $ref: "#/definitions/Account"
  /devApi/account:
    get:
      summary: "returns an account"
      description: ""
      operationId: "getAccount"
      parameters: []
      responses:
        200:
          description: "account"
          schema:
            $ref: "#/definitions/Account"
  /devApi/ingestion:
    get:
      summary: "returns an ingestion"
      description: ""
      operationId: "searchIngestion"
      parameters:
      - name: "searchPattern"
        in: "query"
        required: false
        type: "string"
      - name: "name"
        in: "query"
        required: false
        type: "string"
      - name: "projectId"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      - name: "skip"
        in: "query"
        required: false
        type: "integer"
        default: 0
        format: "int32"
      - name: "limit"
        in: "query"
        required: false
        type: "integer"
        default: 0
        format: "int32"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Ingestion"
        400:
          description: "bad input parameter"
    post:
      summary: "adds an ingestion item"
      description: ""
      operationId: "addIngestion"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Ingestion"
      responses:
        201:
          description: "item created"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing ingestion item already exists"
  /devApi/ingestionSync:
    post:
      summary: "start or schedule an ingestion."
      description: ""
      operationId: "addIngestionSync"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/IngestionSync"
      responses:
        201:
          description: "item created"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing ingestion item does not exists"
  /devApi/ingestionSync{id}:
    get:
      summary: "returns an specific ingestion sync based on the id"
      description: ""
      operationId: "getIngestionSyncProgress"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "ingestion sync matching id"
          schema:
            $ref: "#/definitions/Ingestion"
    delete:
      summary: "Stop (or dequeue) and ingestion sync."
      description: ""
      operationId: "deleteIngestionSync"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        201:
          description: "ingestion sync stopped"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing ingestion sync does not exists"
    patch:
      summary: "Acts on a scheduled sync"
      description: ""
      operationId: "patchIngestionSync"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "operation"
        in: "query"
        required: false
        type: "string"
        enum:
        - "PAUSE"
        - "RESUME"
        - "SHUTDOWN"
        - "SHUTDOWN_NOW"
      responses:
        200:
          description: "account matching id"
          schema:
            $ref: "#/definitions/Account"
  /devApi/ingestionSync{id}/progress:
    get:
      summary: "returns an specific ingestion sync based on the id"
      description: ""
      operationId: "getIngestionSync"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "ingestion sync matching id"
          schema:
            $ref: "#/definitions/Ingestion"
  /devApi/ingestion{id}:
    get:
      summary: "returns an specific ingestion based on the id"
      description: ""
      operationId: "getIngestion"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "ingestion matching id"
          schema:
            $ref: "#/definitions/Ingestion"
    delete:
      summary: "delete an ingestion item"
      description: ""
      operationId: "deleteIngestion"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        201:
          description: "ingestion item deleted"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing ingestion item already exists"
    patch:
      summary: "queue an ingestion for processing"
      description: ""
      operationId: "patchIngestion"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "operation"
        in: "query"
        required: false
        type: "string"
        enum:
        - "START"
        - "SHUTDOWN"
        - "SHUTDOWN_NOW"
      responses:
        201:
          description: "item created"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing ingestion item already exists"
  /devApi/project:
    get:
      summary: "returns a project"
      description: ""
      operationId: "searchProject"
      parameters:
      - name: "searchPattern"
        in: "query"
        required: false
        type: "string"
      - name: "name"
        in: "query"
        required: false
        type: "string"
      - name: "skip"
        in: "query"
        required: false
        type: "integer"
        default: 0
        format: "int32"
      - name: "limit"
        in: "query"
        required: false
        type: "integer"
        default: 0
        format: "int32"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Project"
        400:
          description: "bad input parameter"
    post:
      summary: "adds an project"
      description: ""
      operationId: "addProject"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Project"
      responses:
        201:
          description: "project created"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing project already exists"
  /devApi/project{id}:
    get:
      summary: "returns an specific project based on the id"
      description: ""
      operationId: "getProject"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "project matching id"
          schema:
            $ref: "#/definitions/Project"
    delete:
      summary: "deletes a project"
      description: ""
      operationId: "deleteProject"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        201:
          description: "project deleted"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing project item already exists"
  /devApi/project{id}/ingestionSync{name}:
    get:
      summary: "returns an specific ingestionSync based on the name projectId"
      description: ""
      operationId: "getIngestionSync"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      - name: "projectId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "ingestionSync matching name (and optionally projectId)"
          schema:
            $ref: "#/definitions/Ingestion"
  /devApi/project{id}/ingestion{name}:
    get:
      summary: "returns an specific ingestion based on the name projectId"
      description: ""
      operationId: "getIngestion"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      - name: "projectId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "ingestion matching name (and optionally projectId)"
          schema:
            $ref: "#/definitions/Ingestion"
  /devApi/project{id}/source{name}:
    get:
      summary: "returns a specific source based on the name (and optionally projectId)"
      description: ""
      operationId: "getSource"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "source matching name within project"
          schema:
            $ref: "#/definitions/Source"
  /devApi/project{id}/stream{name}:
    get:
      summary: "returns an specific stream based on the name (and optionally projectId)"
      description: ""
      operationId: "getStream"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "stream matching name within project"
          schema:
            $ref: "#/definitions/Stream"
  /devApi/project{id}/target{name}:
    get:
      summary: "returns an specific target based on the name (and optionally projectId)"
      description: ""
      operationId: "getTarget"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "target matching name within project"
          schema:
            $ref: "#/definitions/Target"
  /devApi/project{name}:
    get:
      summary: "returns an specific project based on the name"
      description: ""
      operationId: "getProject"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "project matching name"
          schema:
            $ref: "#/definitions/Project"
  /devApi/source:
    get:
      summary: "returns an source"
      description: ""
      operationId: "searchSource"
      parameters:
      - name: "searchPattern"
        in: "query"
        required: false
        type: "string"
      - name: "name"
        in: "query"
        required: false
        type: "string"
      - name: "projectId"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      - name: "skip"
        in: "query"
        required: false
        type: "integer"
        default: 0
        format: "int32"
      - name: "limit"
        in: "query"
        required: false
        type: "integer"
        default: 0
        format: "int32"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Source"
        400:
          description: "bad input parameter"
    post:
      summary: "adds an source item"
      description: ""
      operationId: "addSource"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Source"
      responses:
        201:
          description: "source item created"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing source item already exists"
  /devApi/source{id}:
    get:
      summary: "returns a specific source based on the id"
      description: ""
      operationId: "getSource"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "source matching id"
          schema:
            $ref: "#/definitions/Source"
    delete:
      summary: "adds an source item"
      description: ""
      operationId: "deleteSource"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        201:
          description: "source item deleted"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing source item already exists"
  /devApi/source{name}:
    get:
      summary: "returns a specific source based on the name"
      description: ""
      operationId: "getSource"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "source matching name"
          schema:
            $ref: "#/definitions/Source"
  /devApi/stream:
    get:
      summary: "returns an stream"
      description: ""
      operationId: "searchStream"
      parameters:
      - name: "searchPattern"
        in: "query"
        required: false
        type: "string"
      - name: "name"
        in: "query"
        required: false
        type: "string"
      - name: "projectId"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      - name: "skip"
        in: "query"
        required: false
        type: "integer"
        default: 0
        format: "int32"
      - name: "limit"
        in: "query"
        required: false
        type: "integer"
        default: 0
        format: "int32"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Target"
        400:
          description: "bad input parameter"
    post:
      summary: "adds an stream item"
      description: ""
      operationId: "addStream"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Stream"
      responses:
        201:
          description: "stream item created"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing stream item already exists"
  /devApi/stream{id}:
    get:
      summary: "returns an specific stream based on the id"
      description: ""
      operationId: "getStream"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "stream matching id"
          schema:
            $ref: "#/definitions/Stream"
    delete:
      summary: "deletes an stream item"
      description: ""
      operationId: "deleteStream"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        201:
          description: "stream item deleted"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing stream item already exists"
  /devApi/stream{name}:
    get:
      summary: "returns an specific stream based on the name"
      description: ""
      operationId: "getStream"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "stream matching name"
          schema:
            $ref: "#/definitions/Stream"
  /devApi/target:
    get:
      summary: "returns an target"
      description: ""
      operationId: "searchTarget"
      parameters:
      - name: "searchPattern"
        in: "query"
        required: false
        type: "string"
      - name: "name"
        in: "query"
        required: false
        type: "string"
      - name: "projectId"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      - name: "skip"
        in: "query"
        required: false
        type: "integer"
        default: 0
        format: "int32"
      - name: "limit"
        in: "query"
        required: false
        type: "integer"
        default: 0
        format: "int32"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Target"
        400:
          description: "bad input parameter"
    post:
      summary: "adds an target item"
      description: ""
      operationId: "addTarget"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Target"
      responses:
        201:
          description: "target item created"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing target item already exists"
  /devApi/target{id}:
    get:
      summary: "returns an specific target based on the id"
      description: ""
      operationId: "getTarget"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "target matching id"
          schema:
            $ref: "#/definitions/Target"
    delete:
      summary: "deletes an target item"
      description: ""
      operationId: "deleteTarget"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        201:
          description: "target item deleted"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing target item already exists"
  /devApi/target{name}:
    get:
      summary: "returns an specific target based on the name"
      description: ""
      operationId: "getTarget"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "target matching name"
          schema:
            $ref: "#/definitions/Target"
  /devApi/trash/ingestion{id}:
    get:
      summary: "returns an specific deleted ingestion based on the id"
      description: ""
      operationId: "getDeletedIngestion"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "ingestion matching id"
          schema:
            $ref: "#/definitions/Ingestion"
    patch:
      summary: "acts on the specific ingestion specified by the id. Performs the action\
        \ passed via the query param, either an DELETE (permanant), or an UNDELETE"
      description: ""
      operationId: "patchIngestion"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "operation"
        in: "query"
        required: false
        type: "string"
        enum:
        - "UNDELETE"
        - "DELETE"
      responses:
        200:
          description: "ingestion matching id"
          schema:
            $ref: "#/definitions/Ingestion"
  /etlEngine/messageQueue:
    get:
      summary: "returns an messageQueue"
      description: ""
      operationId: "searchMessageQueue"
      parameters:
      - name: "searchPattern"
        in: "query"
        required: false
        type: "string"
      - name: "name"
        in: "query"
        required: false
        type: "string"
      - name: "skip"
        in: "query"
        required: false
        type: "integer"
        default: 0
        format: "int32"
      - name: "limit"
        in: "query"
        required: false
        type: "integer"
        default: 0
        format: "int32"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/StepEndpointTemplate"
        400:
          description: "bad input parameter"
    post:
      tags:
      - "admins"
      summary: "adds an messageQueue"
      description: ""
      operationId: "addMessageQueue"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/MessageQueue"
      responses:
        201:
          description: "messageQueue created"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing messageQueue already exists"
  /etlEngine/messageQueue{id}:
    get:
      tags:
      - "admins"
      summary: "returns an specific messageQueue based on the id"
      description: ""
      operationId: "getMessageQueue"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "source matching id"
          schema:
            $ref: "#/definitions/MessageQueue"
    delete:
      tags:
      - "admins"
      summary: "deletes a messageQueue"
      description: ""
      operationId: "deleteMessageQueue"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        201:
          description: "messageQueue deleted"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing messageQueue item already exists"
  /etlEngine/messageQueue{name}:
    get:
      summary: "returns an specific messageQueue based on the name"
      description: ""
      operationId: "getMessageQueue"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "messageQueue matching name"
          schema:
            $ref: "#/definitions/MessageQueue"
  /etlEngine/messageQueue{name}/message:
    post:
      tags:
      - "admins"
      summary: "receive a specific message from a Push Pubsub Subscription"
      description: ""
      operationId: "receiveMessage"
      consumes:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          type: "string"
      - name: "runAsync"
        in: "query"
        required: false
        type: "boolean"
        default: true
      responses:
        201:
          description: "message received"
        400:
          description: "invalid input, object invalid"
        409:
          description: "mesage not received"
  /etlEngine/messageQueue{name}/messages:
    post:
      tags:
      - "admins"
      summary: "receive messages from a Pull Pubsub Subscription"
      description: ""
      operationId: "receiveMessages"
      consumes:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          type: "boolean"
      responses:
        201:
          description: "message received"
        400:
          description: "invalid input, object invalid"
        409:
          description: "mesage not received"
  /etlEngine/stepEndpointTemplate:
    get:
      summary: "returns an stepEndpointTemplate"
      description: ""
      operationId: "searchStepEndpointTemplate"
      parameters:
      - name: "searchPattern"
        in: "query"
        required: false
        type: "string"
      - name: "name"
        in: "query"
        required: false
        type: "string"
      - name: "skip"
        in: "query"
        required: false
        type: "integer"
        default: 0
        format: "int32"
      - name: "limit"
        in: "query"
        required: false
        type: "integer"
        default: 0
        format: "int32"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/StepEndpointTemplate"
        400:
          description: "bad input parameter"
    post:
      tags:
      - "admins"
      summary: "adds an stepEndpointTemplate"
      description: ""
      operationId: "addStepEndpointTemplate"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/StepEndpointTemplate"
      responses:
        201:
          description: "stepEndpointTemplate created"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing stepEndpointTemplate already exists"
  /etlEngine/stepEndpointTemplate{id}:
    get:
      tags:
      - "admins"
      summary: "returns an specific stepEndpointTemplate based on the id"
      description: ""
      operationId: "getStepEndpointTemplate"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "source matching id"
          schema:
            $ref: "#/definitions/StepEndpointTemplate"
    delete:
      tags:
      - "admins"
      summary: "deletes a stepEndpointTemplate"
      description: ""
      operationId: "deleteStepEndpointTemplate"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        201:
          description: "stepEndpointTemplate deleted"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing stepEndpointTemplate item already exists"
  /etlEngine/stepEndpointTemplate{name}:
    get:
      summary: "returns an specific stepEndpointTemplate based on the name"
      description: ""
      operationId: "getStepEndpointTemplate"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "stepEndpointTemplate matching name"
          schema:
            $ref: "#/definitions/MessageQueue"
securityDefinitions:
  basicAuth:
    type: "basic"
definitions:
  Account:
    type: "object"
    required:
    - "firstName"
    - "id"
    - "lastName"
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "the internal Id of the object.  This is autogenerated.  Any\
          \ value passed will be overwritten."
      name:
        type: "string"
        description: "the name of the object. Once set, this cannot be changed."
        readOnly: true
      dateCreated:
        type: "string"
        description: "the date/time on which the object was created.  This is autogenerated.\
          \  Any value passed will be overwritten."
        readOnly: true
      dateLastModified:
        type: "string"
        description: "the date/time on which the object was last modified.  This is\
          \ automatically maintained by the API. Any value passed will be overwritten."
        readOnly: true
      dateDeleted:
        type: "string"
        description: "the date/time on which the object was deleted.  This is automatically\
          \ maintained by the API and is only return for deleted items."
        readOnly: true
      isDeleted:
        type: "boolean"
        readOnly: true
        default: false
      company:
        type: "string"
        description: "the company name associated with the account."
      firstName:
        type: "string"
        description: "the first name of the contact associated with the account."
      lastName:
        type: "string"
        description: "the last name of the contact associated with the account."
    description: "an account under which projects are created.  These are typically\
      \ created for a single company.  Multiple users can be added to the account\
      \ with varied permissions to access projects managed by the account."
  SourceType:
    type: "object"
    required:
    - "id"
    - "name"
    properties:
      sqlQueryable:
        type: "boolean"
        default: false
      id:
        type: "integer"
        format: "int64"
        description: "the internal Id of the object.  This is autogenerated.  Any\
          \ value passed will be overwritten."
      name:
        type: "string"
        description: "the name of the object. Once set, this cannot be changed."
        readOnly: true
      dateCreated:
        type: "string"
        description: "the date/time on which the object was created.  This is autogenerated.\
          \  Any value passed will be overwritten."
        readOnly: true
      dateLastModified:
        type: "string"
        description: "the date/time on which the object was last modified.  This is\
          \ automatically maintained by the API. Any value passed will be overwritten."
        readOnly: true
      dateDeleted:
        type: "string"
        description: "the date/time on which the object was deleted.  This is automatically\
          \ maintained by the API and is only return for deleted items."
        readOnly: true
      isDeleted:
        type: "boolean"
        readOnly: true
        default: false
    description: "a type of source that can be consumed.  Examples of a sourceType\
      \ could be a REST api, a database, a CSV file or a spreadsheet."
  Schema:
    type: "object"
    required:
    - "fields"
    - "keyFields"
    properties:
      fieldNames:
        type: "array"
        items:
          type: "string"
      fieldPaths:
        type: "array"
        items:
          type: "string"
      id:
        type: "integer"
        format: "int64"
        description: "the internal Id of the schema.  This is autogenerated."
        readOnly: true
      fields:
        type: "array"
        description: "a list of field names that define the specific fields from the\
          \ stream to be ingested.  If not present, all fields within the stream will\
          \ be ingested"
        items:
          $ref: "#/definitions/Field"
      keyFields:
        type: "array"
        description: "a list of fields that comprise a unique key for the schema"
        items:
          type: "string"
    description: "a list of field names that define the schema.  This may be a subset\
      \ of all fields available within the stream. The schema fields are considered\
      \ to be all fields array of fields is not populated."
  Metadata:
    type: "object"
    required:
    - "key"
    - "value"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "the internal Id of the Metadata.  This is autogenerated."
        readOnly: true
      key:
        type: "string"
        example: "project/stage1/name"
        description: "the name of the key.  Keys can be described with a name that\
          \ specifies a tree like structure with \"/\" delimiters specifying levels\
          \ of the tree."
      value:
        type: "string"
        example: "project/stage1/name"
        description: "the name of the key.  Keys can be described with a name that\
          \ specifies a tree like structure with \"/\" delimiters specifying levels\
          \ of the tree."
    description: "custom data that provides config details for the object to which\
      \ it is attached.  Each metadata is a key/value pair."
  IngestionSyncProgress:
    type: "object"
    properties:
      completed:
        type: "integer"
        format: "int32"
      total:
        type: "integer"
        format: "int32"
  Source:
    type: "object"
    required:
    - "id"
    - "name"
    - "sourceType"
    properties:
      projectId:
        type: "integer"
        format: "int64"
      accountId:
        type: "integer"
        format: "int64"
      id:
        type: "integer"
        format: "int64"
        description: "the internal Id of the object.  This is autogenerated.  Any\
          \ value passed will be overwritten."
      name:
        type: "string"
        description: "the name of the object. Once set, this cannot be changed."
        readOnly: true
      dateCreated:
        type: "string"
        description: "the date/time on which the object was created.  This is autogenerated.\
          \  Any value passed will be overwritten."
        readOnly: true
      dateLastModified:
        type: "string"
        description: "the date/time on which the object was last modified.  This is\
          \ automatically maintained by the API. Any value passed will be overwritten."
        readOnly: true
      dateDeleted:
        type: "string"
        description: "the date/time on which the object was deleted.  This is automatically\
          \ maintained by the API and is only return for deleted items."
        readOnly: true
      isDeleted:
        type: "boolean"
        readOnly: true
        default: false
      project:
        description: "the project to which the source belongs.  If not specified,\
          \ this source will be shared between all projects within the account."
        $ref: "#/definitions/Project"
      sourceType:
        description: "The type of source that data will be extracted from.  The value\
          \ must match a list of Sources supported by Epoxi. See http://epoxi.io/[TODO]\
          \ for details"
        $ref: "#/definitions/SourceType"
      properties:
        description: "The properties of the source. Valid properties are : config\
          \ (a json object used by taps), catalog (a json object used by taps), and\
          \ tableId (used when the source is a database tableId managed by the etlEngine).\
          \ tableId must be specified in the form [projectId].datasetId.tableName\
          \ where projectId is optional. If projectId is not specified, the project\
          \ Id to which the source belongs will be assumed. In the case that the source\
          \ does not specify a project Id, it must be included in the tableId property"
        $ref: "#/definitions/Metadata"
    description: "details about the specific type and location of the data to be ingested."
  Ingestion:
    type: "object"
    required:
    - "id"
    - "ingestionType"
    - "name"
    - "streams"
    - "target"
    properties:
      source:
        $ref: "#/definitions/Source"
      keyFieldId:
        type: "string"
      projectId:
        type: "integer"
        format: "int64"
      accountId:
        type: "integer"
        format: "int64"
      id:
        type: "integer"
        format: "int64"
        description: "the internal Id of the object.  This is autogenerated.  Any\
          \ value passed will be overwritten."
      name:
        type: "string"
        description: "the name of the object. Once set, this cannot be changed."
        readOnly: true
      dateCreated:
        type: "string"
        description: "the date/time on which the object was created.  This is autogenerated.\
          \  Any value passed will be overwritten."
        readOnly: true
      dateLastModified:
        type: "string"
        description: "the date/time on which the object was last modified.  This is\
          \ automatically maintained by the API. Any value passed will be overwritten."
        readOnly: true
      dateDeleted:
        type: "string"
        description: "the date/time on which the object was deleted.  This is automatically\
          \ maintained by the API and is only return for deleted items."
        readOnly: true
      isDeleted:
        type: "boolean"
        readOnly: true
        default: false
      project:
        description: "the project to which the source belongs.  If not specified,\
          \ this source will be shared between all projects within the account."
        $ref: "#/definitions/Project"
      streams:
        type: "array"
        description: "an array of the streams that will comprise the data to be ingested.\
          \  At least one stream is required.  If additional streams are specified,\
          \ they will be unioned to the stream output in the order they appear in\
          \ the array.  If dupliate fields are found in each stream, data in earlier\
          \ fields will be overwritten by data found in later streams."
        items:
          $ref: "#/definitions/Stream"
      target:
        description: "the id of a target where streamed data will be stored"
        $ref: "#/definitions/Target"
      ingestionType:
        type: "string"
        description: "the type of ingestion required. At the current time, all ingestions\
          \ are of type Standard."
        enum:
        - "STANDARD"
      weight:
        type: "integer"
        format: "int32"
        description: "a hint as to the order of ingestion for a given source.  Ingestions\
          \ with lower numbers have priority."
      deleteThreshold:
        type: "number"
        format: "float"
        description: "determines a threshold of permitted deletes from the target\
          \ table based on incoming data from the source.  When the threshold is exceeded,\
          \ the ingestion will not complete and instead generate an error. If no value\
          \ is set, the default is 1"
      updateType:
        type: "string"
        description: "a hint that specifies whether the source contain a full, patial\
          \ or delete only set of rows"
        enum:
        - "FULL"
        - "DELETE"
        - "PARTIAL"
      scdType:
        type: "string"
        description: "determines the way rows are created within the targetd.  TypeI\
          \ will 1) add new values, 2) overwrite existing values. TypeII will 1) append\
          \ new and existing data as new rows and 2) mark previous existing rows as\
          \ expired.  Deleted rows will be marked as expired for all scdTypes."
        enum:
        - "TYPEI"
        - "TYPEII"
    description: "details about the specific ingestion of data from a stream attached\
      \ to a source."
  StepEndpointTemplate:
    type: "object"
    required:
    - "endpointType"
    - "id"
    - "name"
    - "stepType"
    - "tableId"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "the internal Id of the object.  This is autogenerated.  Any\
          \ value passed will be overwritten."
      name:
        type: "string"
        description: "the name of the object. Once set, this cannot be changed."
        readOnly: true
      dateCreated:
        type: "string"
        description: "the date/time on which the object was created.  This is autogenerated.\
          \  Any value passed will be overwritten."
        readOnly: true
      dateLastModified:
        type: "string"
        description: "the date/time on which the object was last modified.  This is\
          \ automatically maintained by the API. Any value passed will be overwritten."
        readOnly: true
      dateDeleted:
        type: "string"
        description: "the date/time on which the object was deleted.  This is automatically\
          \ maintained by the API and is only return for deleted items."
        readOnly: true
      isDeleted:
        type: "boolean"
        readOnly: true
        default: false
      endpointType:
        type: "string"
        description: "the endpoint of the pipeine"
        enum:
        - "SOURCE"
        - "TARGET"
      stepType:
        type: "string"
        description: "the StepType of the Pipeline"
        enum:
        - "EXTRACT"
        - "TRANSFORM"
        - "LOAD"
      tableId:
        type: "string"
        description: "the table that define the enpoint of the pipeline"
      keyfieldId:
        type: "string"
        description: "the keyfield defining the data that will be passed on the pipeine"
    description: "config info that describes an endpoint template for a specific stepType"
  Project:
    type: "object"
    required:
    - "id"
    - "name"
    - "targetType"
    properties:
      accountId:
        type: "integer"
        format: "int64"
      id:
        type: "integer"
        format: "int64"
        description: "the internal Id of the object.  This is autogenerated.  Any\
          \ value passed will be overwritten."
      name:
        type: "string"
        description: "the name of the object. Once set, this cannot be changed."
        readOnly: true
      dateCreated:
        type: "string"
        description: "the date/time on which the object was created.  This is autogenerated.\
          \  Any value passed will be overwritten."
        readOnly: true
      dateLastModified:
        type: "string"
        description: "the date/time on which the object was last modified.  This is\
          \ automatically maintained by the API. Any value passed will be overwritten."
        readOnly: true
      dateDeleted:
        type: "string"
        description: "the date/time on which the object was deleted.  This is automatically\
          \ maintained by the API and is only return for deleted items."
        readOnly: true
      isDeleted:
        type: "boolean"
        readOnly: true
        default: false
      metadata:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/Metadata"
      targetType:
        type: "string"
        description: "the target type of the project.  All ingestions targets must\
          \ confirm to this target type."
        enum:
        - "BIGQUERY"
    description: "A project is a collection of sources, targets and ingestions that\
      \ are used to achieve the specific dataset(s) required."
  Field:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "the internal Id of the field.  This is autogenerated."
      name:
        type: "string"
        description: "The name of the field when it is returned within a stream. \
          \ Name is required. Where name and path are different, name will be used\
          \ like an column alias."
      path:
        type: "string"
        description: "the name of the field. Typically this is the name of a field\
          \ in a source or target. Path is optional. When not specified, it is assumed\
          \ to be the same as the name."
    description: "a field defines a source or target field as well as an path for\
      \ how it will be represented in a view."
  Target:
    type: "object"
    required:
    - "id"
    - "name"
    properties:
      projectId:
        type: "integer"
        format: "int64"
      accountId:
        type: "integer"
        format: "int64"
      id:
        type: "integer"
        format: "int64"
        description: "the internal Id of the object.  This is autogenerated.  Any\
          \ value passed will be overwritten."
      name:
        type: "string"
        description: "the name of the object. Once set, this cannot be changed."
        readOnly: true
      dateCreated:
        type: "string"
        description: "the date/time on which the object was created.  This is autogenerated.\
          \  Any value passed will be overwritten."
        readOnly: true
      dateLastModified:
        type: "string"
        description: "the date/time on which the object was last modified.  This is\
          \ automatically maintained by the API. Any value passed will be overwritten."
        readOnly: true
      dateDeleted:
        type: "string"
        description: "the date/time on which the object was deleted.  This is automatically\
          \ maintained by the API and is only return for deleted items."
        readOnly: true
      isDeleted:
        type: "boolean"
        readOnly: true
        default: false
      project:
        description: "the project to which the source belongs.  If not specified,\
          \ this source will be shared between all projects within the account."
        $ref: "#/definitions/Project"
      properties:
        description: "Extended properties for the target"
        $ref: "#/definitions/Metadata"
      keyFieldId:
        type: "string"
        description: "the name of the field that defines the primary key of the target.\
          \  When not specified, keyfieldId will be set to the name of the table appended\
          \ with a suffix of '_Key'"
    description: "details about the specific location (typically a database) where\
      \ the data will reside after ingestion."
  MessageQueue:
    type: "object"
    required:
    - "id"
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "the internal Id of the object.  This is autogenerated.  Any\
          \ value passed will be overwritten."
      name:
        type: "string"
        description: "the name of the object. Once set, this cannot be changed."
        readOnly: true
      dateCreated:
        type: "string"
        description: "the date/time on which the object was created.  This is autogenerated.\
          \  Any value passed will be overwritten."
        readOnly: true
      dateLastModified:
        type: "string"
        description: "the date/time on which the object was last modified.  This is\
          \ automatically maintained by the API. Any value passed will be overwritten."
        readOnly: true
      dateDeleted:
        type: "string"
        description: "the date/time on which the object was deleted.  This is automatically\
          \ maintained by the API and is only return for deleted items."
        readOnly: true
      isDeleted:
        type: "boolean"
        readOnly: true
        default: false
      queueType:
        type: "string"
        description: "the purpose of the queue"
        enum:
        - "IN"
        - "OUT"
        - "ERROR"
      stepType:
        type: "string"
        description: "the StepType of the queue"
        enum:
        - "EXTRACT"
        - "TRANSFORM"
        - "LOAD"
      queue:
        description: "the pubsub queue"
        $ref: "#/definitions/Queue"
      weight:
        type: "integer"
        format: "int32"
        description: "a weight that specifies the order of processing.  Queues with\
          \ lower weight will be processed first"
    description: "config info that associates a queue with a specific queueType and\
      \ StepType"
  Schedule:
    type: "object"
    properties:
      name:
        type: "string"
      detail:
        type: "string"
      timezone:
        type: "string"
  Stream:
    type: "object"
    required:
    - "id"
    - "name"
    - "source"
    properties:
      hashKeyFieldId:
        type: "string"
        description: "the name of the field that will contain the unique hash of key\
          \ fields.  This name should match the keyFieldId of the Ingestion.target"
      nestFieldId:
        type: "string"
        description: "when a value is specified, the stream will be returned as a\
          \ single field called nestField, and where each field in the stream is a\
          \ subfield"
      anonymous:
        type: "boolean"
        default: false
      projectId:
        type: "integer"
        format: "int64"
      accountId:
        type: "integer"
        format: "int64"
      id:
        type: "integer"
        format: "int64"
        description: "the internal Id of the object.  This is autogenerated.  Any\
          \ value passed will be overwritten."
      name:
        type: "string"
        description: "the name of the object. Once set, this cannot be changed."
        readOnly: true
      dateCreated:
        type: "string"
        description: "the date/time on which the object was created.  This is autogenerated.\
          \  Any value passed will be overwritten."
        readOnly: true
      dateLastModified:
        type: "string"
        description: "the date/time on which the object was last modified.  This is\
          \ automatically maintained by the API. Any value passed will be overwritten."
        readOnly: true
      dateDeleted:
        type: "string"
        description: "the date/time on which the object was deleted.  This is automatically\
          \ maintained by the API and is only return for deleted items."
        readOnly: true
      isDeleted:
        type: "boolean"
        readOnly: true
        default: false
      project:
        description: "the project to which the source belongs.  If not specified,\
          \ this source will be shared between all projects within the account."
        $ref: "#/definitions/Project"
      source:
        description: "the source object that holds the data returned by the stream"
        $ref: "#/definitions/Source"
      schema:
        description: "the schema that defines the fields returned within the stream"
        $ref: "#/definitions/Schema"
    description: "details about a particular data set that exists within a source\
      \ that can be ingested.  Streams specify a source from where the data can be\
      \ obtained, as well as a view that specifies what fields are consumed as well\
      \ as how they be presented in the target."
  IngestionSync:
    type: "object"
    required:
    - "id"
    - "ingestion"
    - "name"
    properties:
      projectId:
        type: "integer"
        format: "int64"
      accountId:
        type: "integer"
        format: "int64"
      id:
        type: "integer"
        format: "int64"
        description: "the internal Id of the object.  This is autogenerated.  Any\
          \ value passed will be overwritten."
      name:
        type: "string"
        description: "the name of the object. Once set, this cannot be changed."
        readOnly: true
      dateCreated:
        type: "string"
        description: "the date/time on which the object was created.  This is autogenerated.\
          \  Any value passed will be overwritten."
        readOnly: true
      dateLastModified:
        type: "string"
        description: "the date/time on which the object was last modified.  This is\
          \ automatically maintained by the API. Any value passed will be overwritten."
        readOnly: true
      dateDeleted:
        type: "string"
        description: "the date/time on which the object was deleted.  This is automatically\
          \ maintained by the API and is only return for deleted items."
        readOnly: true
      isDeleted:
        type: "boolean"
        readOnly: true
        default: false
      project:
        description: "the project to which the source belongs.  If not specified,\
          \ this source will be shared between all projects within the account."
        $ref: "#/definitions/Project"
      ingestion:
        description: "the ingestion to be scheduled"
        $ref: "#/definitions/Ingestion"
      schedule:
        description: "the schedule that determines when the ingestion should be triggered"
        $ref: "#/definitions/Schedule"
      state:
        type: "string"
        description: "sets a state that indicates whether the ingestion can be synced.\
          \  When this flag is anything other than Active, ingestion syncs will not\
          \ occur"
        enum:
        - "UNSPECIFIED"
        - "ENABLED"
        - "PAUSED"
        - "FAILED"
    description: "executes an ingestion on a specific schedule.  If not schedule is\
      \ specified, the execution is immediate."
  Queue:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      path:
        type: "string"
    description: "info about a pubsub queue"
