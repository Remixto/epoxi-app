package io.epoxi.repository.modelbase;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.googlecode.objectify.Ref;
import com.googlecode.objectify.annotation.Id;
import com.googlecode.objectify.annotation.Ignore;
import com.googlecode.objectify.annotation.Index;
import io.epoxi.util.validation.Validator;
import io.swagger.annotations.ApiModelProperty;
import lombok.Getter;
import lombok.NonNull;
import lombok.Setter;

import java.util.Optional;

public abstract class EngineMember<T>{

    @JsonIgnore
    protected EngineMember()
    {}

    @JsonIgnore
    protected EngineMember (String name)
    {
        this.name = Optional.ofNullable(name).orElseThrow();
    }    

    @Ignore protected Validator validator = new Validator();
    
    @ApiModelProperty(required = true, value = "the internal Id of the object.  This is autogenerated.  Any value passed will be overwritten.")
    @Getter(onMethod=@__({@JsonProperty("id")}))
    @Setter
    /*
     * the internal Id of the project. 
     * This is autogenerated.
     */
    @Id protected Long id = null;

    @ApiModelProperty(required = true, value = "the name of the object. Once set, this cannot be changed.")
    @Index 
    @NonNull
    @Getter(onMethod=@__({@JsonProperty("name")}))
    /*
     * the name of the object. Once set, this cannot be changed.
     */
    protected String name = null;

    @ApiModelProperty(value = "the date/time on which the object was created.  This is autogenerated.  Any value passed will be overwritten.")
    @Index
    @Getter(onMethod=@__({@JsonProperty("dateCreated")}))
    /*
     * the date/time on which the object was created.  
     * This is autogenerated.  Any value passed will be overwritten.
     */
    protected String dateCreated = null;

    @ApiModelProperty(value = "the date/time on which the object was last modified.  This is automatically maintained by the API. Any value passed will be overwritten.")
    @Index
    @Getter(onMethod=@__({@JsonProperty("dateLastModified")}))
    /*
     * the date/time on which the object was last modified.  
     * This is automatically maintained by the API. Any value passed will be overwritten.
     */
    protected String dateLastModified = null;

    @ApiModelProperty(value = "the date/time on which the object was deleted.  This is automatically maintained by the API and is only return for deleted items.")
    @Index
    @Getter(onMethod=@__({@JsonProperty("dateDeleted")}))
    /*
     * the date/time on which the object was deleted.  
     * This is automatically maintained by the API and is only return for deleted items.
     */
    protected String dateDeleted = null;
 
    @Index
    @Getter(onMethod=@__({@JsonProperty("isDeleted")}))
    protected Boolean isDeleted = null;

    /**
     * Throws InvalidStateException if validation fails
     */
    public void validOrThrow()
    {
        validator.validOrThrow(this.getName());
    }

    /**
     * Throws InvalidStateException if validation fails
     */
    public void validate()
    {
        validator.validate();
    }

    @Override
    public String toString() {
       return toString(this);
    }   

    public static String toString(Object obj)
    {
        StringBuilder sb = new StringBuilder();
        sb.append(String.format("class %s {%n", obj.getClass().getSimpleName()));

        for (java.lang.reflect.Field field : obj.getClass().getDeclaredFields()) {
			if (field.isAnnotationPresent(JsonProperty.class)) {
                
                String name = field.getName();
                try
                {
                    String value = field.get(obj).toString();
                    sb.append(String.format("    %s: ", name)).append(toIndentedString(value)).append("\n");
                }
                catch(IllegalAccessException ex)
                {
                    sb.append(String.format("    %s: ", name)).append(toIndentedString("[Not read]")).append("\n");
                }
            }
        }
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private static String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    @SuppressWarnings("unchecked")
    public Ref<T> toRef()
    {       
        return ObjectifyRegistry.run(() -> (Ref<T>)Ref.create(this));
    }
   
    public abstract EngineRepository<?> getRepository();
   
}