package io.epoxi.app.repository.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.googlecode.objectify.annotation.Entity;
import com.googlecode.objectify.annotation.Id;
import io.epoxi.app.repository.modelbase.EngineMember;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Getter;
import lombok.NonNull;
import lombok.Setter;

import java.util.Optional;

/**
 * custom data that provides config details for the object to which it is
 * attached. Each metadata is a key/value pair.
 **/
@Entity
@ApiModel(description = "custom data that provides config details for the object to which it is attached.  Each metadata is a key/value pair.")
public class Metadata {

    private Metadata()
    {}

    private Metadata (String key, String value)
    {
        this.key = Optional.ofNullable(key).orElseThrow();
        this.value = value;
    }

    @ApiModelProperty(value = "the internal Id of the Metadata.  This is autogenerated.")
    @Getter(onMethod=@__({@JsonProperty("id")}))
    /*
     * the internal Id of the Metadata. This is autogenerated.
     **/
    @Id private final Long id = null;

    @ApiModelProperty(required=true, example = "project/stage1/name", value = "the name of the key.  Keys can be described with a name that specifies a tree like structure with \"/\" delimiters specifying levels of the tree.")
    @NonNull
    @Getter(onMethod=@__({@JsonProperty("key")}))
    @Setter
    /*
     * the name of the key. Keys can be described with a name that specifies a tree
     * like structure with \"/\" delimiters specifying levels of the tree.
     **/
    private String key;

    @ApiModelProperty(required=true, example = "project/stage1/name", value = "the name of the key.  Keys can be described with a name that specifies a tree like structure with \"/\" delimiters specifying levels of the tree.")
    @NonNull
    @Getter(onMethod=@__({@JsonProperty("value")}))
    @Setter
    /*
     * the name of the key. Keys can be described with a name that specifies a tree
     * like structure with \"/\" delimiters specifying levels of the tree.
     **/
    private String value;

    @Override
    public String toString() {
        return EngineMember.toString(this);
    }


    public static Metadata of(String key, String value)
    {
        return new Metadata(key, value);
    }
}
